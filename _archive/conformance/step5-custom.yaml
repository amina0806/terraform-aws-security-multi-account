AWSTemplateFormatVersion: '2010-09-09'
Description: "Step5 - Custom Config rules for S3 KMS enforcement"

Parameters:
  AllowedKmsKeyArns:
    Type: CommaDelimitedList
    Description: "Allowed KMS Key ARNs for S3 default encryption"

Resources:
  # 1) Managed rule: bucket must have SSE turned on
  S3BucketSSEEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-sse-enabled
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED

  # 2) Custom Lambda rule: enforce specific KMS key(s)
  KmsKeyEnforcedRule:
  Type: AWS::Config::ConfigRule
  DependsOn: KmsRuleInvokePermission
  Properties:
    ConfigRuleName: s3-bucket-kms-key-enforced
    InputParameters:
      AllowedKmsKeyArns: !Join [",", !Ref AllowedKmsKeyArns]
    Scope:
      ComplianceResourceTypes:
        - AWS::S3::Bucket
    Source:
      Owner: CUSTOM_LAMBDA
      SourceIdentifier: !GetAtt KmsRuleFunction.Arn
      SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        - EventSource: aws.config
          MessageType: OversizedConfigurationItemChangeNotification


  KmsRuleInvokePermission:
  Type: AWS::Lambda::Permission
  Properties:
    Action: lambda:InvokeFunction
    FunctionName: !Ref KmsRuleFunction
    Principal: config.amazonaws.com
    SourceAccount: !Ref AWS::AccountId
    SourceArn: !GetAtt KmsKeyEnforcedRule.Arn


  KmsRuleFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowReadS3EncAndConfig
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetBucketEncryption"
                  - "config:PutEvaluations"
                Resource: "*"

  KmsRuleFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt KmsRuleFunctionRole.Arn
      Environment:
        Variables:
          ALLOWED_KMS_ARNS: !Join [",", !Ref AllowedKmsKeyArns]
      Code:
        ZipFile: |
          import os, json, boto3, botocore
          s3 = boto3.client('s3')
          config = boto3.client('config')

          def evaluate_bucket(bucket, allowed_arns):
              try:
                  enc = s3.get_bucket_encryption(Bucket=bucket)
                  rules = enc['ServerSideEncryptionConfiguration']['Rules']
                  # Look for default rule == aws:kms + allowed key
                  for r in rules:
                      d = r.get('ApplyServerSideEncryptionByDefault', {})
                      algo = d.get('SSEAlgorithm')
                      key  = d.get('KMSMasterKeyID')
                      if algo == 'aws:kms' and key and key in allowed_arns:
                          return 'COMPLIANT', f'Bucket {bucket} uses allowed CMK.'
                  return 'NON_COMPLIANT', f'Bucket {bucket} not using one of the allowed CMKs.'
              except botocore.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == 'ServerSideEncryptionConfigurationNotFoundError':
                      return 'NON_COMPLIANT', f'Bucket {bucket} has no default encryption.'
                  raise

          def lambda_handler(event, context):
              allowed = os.environ.get('ALLOWED_KMS_ARNS', '')
              allowed_arns = [a.strip() for a in allowed.split(',') if a.strip()]

              invoking_event = json.loads(event['invokingEvent'])
              ci = invoking_event.get('configurationItem')
              if ci:
                  # Change notification path
                  bucket = ci.get('resourceName')
                  compliance_type, annotation = evaluate_bucket(bucket, allowed_arns)
                  result = {
                      'ComplianceResourceType': ci['resourceType'],
                      'ComplianceResourceId': ci['resourceId'],
                      'ComplianceType': compliance_type,
                      'Annotation': annotation,
                      'OrderingTimestamp': ci['configurationItemCaptureTime']
                  }
              else:
                  # Scheduled: evaluate discovered bucket from message
                  bucket = invoking_event['configurationItemSummary']['resourceName']
                  compliance_type, annotation = evaluate_bucket(bucket, allowed_arns)
                  result = {
                      'ComplianceResourceType': 'AWS::S3::Bucket',
                      'ComplianceResourceId': bucket,
                      'ComplianceType': compliance_type,
                      'Annotation': annotation,
                      'OrderingTimestamp': json.loads(event['invokingEvent'])['notificationCreationTime']
                  }

              config.put_evaluations(
                  Evaluations=[result],
                  ResultToken=event['resultToken']
              )
